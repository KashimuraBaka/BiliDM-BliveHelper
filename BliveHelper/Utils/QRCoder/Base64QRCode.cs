using BliveHelper.Utils.Structs;
using System;
using static BliveHelper.Utils.QRCoder.Base64QRCode;
using static BliveHelper.Utils.QRCoder.QRCodeGenerator;

namespace BliveHelper.Utils.QRCoder
{
    /// <summary>
    /// Represents a QR code generator that outputs base64-encoded images.
    /// </summary>
    public class Base64QRCode : AbstractQRCode, IDisposable
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Base64QRCode"/> class.
        /// Constructor without parameters to be used in COM objects connections.
        /// </summary>
        public Base64QRCode()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Base64QRCode"/> class with the specified <see cref="QRCodeData"/>.
        /// </summary>
        /// <param name="data"><see cref="QRCodeData"/> generated by the QRCodeGenerator.</param>
        public Base64QRCode(QRCodeData data) : base(data)
        {
        }

        /// <summary>
        /// Returns a base64-encoded string that contains the resulting QR code as a PNG image.
        /// </summary>
        /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
        /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        public string GetGraphic(int pixelsPerModule) => GetGraphic(pixelsPerModule, Color.Black, Color.White, true);

        /// <summary>
        /// Returns a base64-encoded string that contains the resulting QR code as an image.
        /// </summary>
        /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
        /// <param name="darkColor">The color of the dark modules.</param>
        /// <param name="lightColor">The color of the light modules.</param>
        /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
        /// <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
        /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        public string GetGraphic(int pixelsPerModule, Color darkColor, Color lightColor, bool drawQuietZones = true, ImageType imgType = ImageType.Png)
        {
            if (imgType == ImageType.Png)
            {
                var pngCoder = new PngByteQRCode(QrCodeData);

                byte[] pngData;
                if (darkColor.Equals(Color.Black) && lightColor.Equals(Color.White))
                {
                    pngData = pngCoder.GetGraphic(pixelsPerModule, drawQuietZones);
                }
                else
                {
                    byte[] darkColorBytes;
                    byte[] lightColorBytes;
                    if (darkColor.A != 255 || lightColor.A != 255)
                    {
                        darkColorBytes = new byte[] { darkColor.R, darkColor.G, darkColor.B, darkColor.A };
                        lightColorBytes = new byte[] { lightColor.R, lightColor.G, lightColor.B, lightColor.A };
                    }
                    else
                    {
                        darkColorBytes = new byte[] { darkColor.R, darkColor.G, darkColor.B };
                        lightColorBytes = new byte[] { lightColor.R, lightColor.G, lightColor.B };
                    }
                    pngData = pngCoder.GetGraphic(pixelsPerModule, darkColorBytes, lightColorBytes, drawQuietZones);
                }

                return Convert.ToBase64String(pngData, Base64FormattingOptions.None);
            }
            throw new PlatformNotSupportedException("Only the PNG image type is supported on this platform.");
        }

        /// <summary>
        /// Specifies the type of image to generate.
        /// </summary>
        public enum ImageType
        {
            /// <summary>
            /// GIF image format.
            /// </summary>
            Gif,
            /// <summary>
            /// JPEG image format.
            /// </summary>
            Jpeg,
            /// <summary>
            /// PNG image format.
            /// </summary>
            Png
        }

    }
}
